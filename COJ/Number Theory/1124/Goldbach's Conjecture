def SieveOfEratosthenes(n):
     
    # Create a boolean array "prime[0..n]" and initialize
    #  all entries it as true. A value in prime[i] will
    # finally be false if i is Not a prime, else true.
    prime = [True for i in range(n+1)]
    p = 2
    while (p * p <= n):
         
        # If prime[p] is not changed, then it is a prime
        if (prime[p] == True):
             
            # Update all multiples of p
            for i in range(p * 2, n+1, p):
                prime[i] = False
        p += 1
     
    # Print all prime numbers
    #for p in range(2, n):
        #if prime[p]:
    return prime
 
# driver program
if __name__=='__main__':
    n = 1000000
    prime = SieveOfEratosthenes(n)
    num = int(input())
    while(num!=0):
        i = num-1
        first = -1
        second = -4
        while( (first+second)!=num and first>second):
            while(prime[i]!=True):
                i-=2
            first = i
            second = num-first
            if(second==1):
                second=first-1
            elif(second%2 == 0):
                second = first-1
            i-=2
            #print(i)
        if(first>0 and first>second):
            print(num, "=" , second , "+", first)
        else:
            print("Goldbach's conjecture is wrong.")
        num = int(input())
